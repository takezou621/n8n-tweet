name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # Quality checks and security scanning
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better analysis

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run ESLint
      run: npx eslint src/ tests/ --format=stylish --max-warnings=0
      env:
        NODE_ENV: test

    - name: Check dependencies for vulnerabilities
      run: npm audit --audit-level=moderate

    - name: Check for outdated dependencies
      run: npm outdated || true

  # Matrix testing across Node.js versions
  test:
    name: Test (Node.js ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: ['18', '20', '22']
      fail-fast: false

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: n8n_test
          POSTGRES_USER: n8n_test
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Wait for services to be ready
      run: |
        # Wait for Redis
        timeout 30 bash -c 'until node scripts/redis-health-check.js; do sleep 1; done'
        
        # Wait for PostgreSQL
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U n8n_test; do sleep 1; done'

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        CI: true
        REDIS_URL: redis://localhost:6379
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        DB_TYPE: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: n8n_test
        DB_USERNAME: n8n_test
        DB_PASSWORD: test_password

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        CI: true
        REDIS_URL: redis://localhost:6379
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        DB_TYPE: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: n8n_test
        DB_USERNAME: n8n_test
        DB_PASSWORD: test_password

    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
        CI: true

    - name: Run security tests
      run: npm run test:security
      env:
        NODE_ENV: test
        CI: true

  # Test coverage analysis
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Wait for Redis
      run: timeout 30 bash -c 'until node scripts/redis-health-check.js; do sleep 1; done'

    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        CI: true
        REDIS_URL: redis://localhost:6379
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Coverage Comment
      uses: MishaKav/jest-coverage-comment@main
      if: github.event_name == 'pull_request'
      with:
        coverage-summary-path: ./coverage/coverage-summary.json
        title: Test Coverage Report
        summary-title: Coverage Summary

  # Docker build test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        push: false
        tags: n8n-tweet:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: n8n-tweet:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test production image
      run: |
        docker run --rm -d --name test-container -p 3000:3000 n8n-tweet:latest
        sleep 10
        curl -f http://localhost:3000/api/v1/health || exit 1
        docker stop test-container

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, coverage, docker, security]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.quality.result }}" != "success" || 
              "${{ needs.test.result }}" != "success" || 
              "${{ needs.coverage.result }}" != "success" || 
              "${{ needs.docker.result }}" != "success" ]]; then
          echo "One or more critical jobs failed"
          exit 1
        fi
        
        if [[ "${{ needs.security.result }}" == "failure" ]]; then
          echo "Security scan failed - please review"
          exit 1
        fi
        
        echo "All CI checks passed successfully!"

    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow