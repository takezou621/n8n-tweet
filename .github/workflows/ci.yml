name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日午前2時にヘルスチェック実行
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  COVERAGE_THRESHOLD: 85

jobs:
  # 🔍 Code Quality Check
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 ESLint Check
      run: npm run lint
      
    - name: 📊 Code Quality Analysis
      run: |
        echo "Running code quality analysis..."
        npm run test:coverage
        
    - name: 📈 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 🧪 Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: quality-check
    
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🧪 Run Unit Tests
      run: npm run test:unit
      
    - name: 📊 Generate Test Report
      run: |
        npm run test:coverage
        echo "Unit tests completed for Node.js ${{ matrix.node-version }}"

  # 🔗 Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🗂️ Create Test Data Directories
      run: |
        mkdir -p tests/data
        mkdir -p logs
        mkdir -p cache
        
    - name: 🔗 Run Integration Tests
      run: npm run test:integration
      env:
        REDIS_URL: redis://localhost:6379
        TEST_MODE: true
        
    - name: 📊 Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          tests/data/
          logs/
        retention-days: 7

  # ⚡ Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: ⚡ Run Performance Tests
      run: npm run test:performance
      timeout-minutes: 15
      
    - name: 📊 Performance Report
      run: |
        echo "Performance test completed"
        if [ -f tests/data/performance-results.json ]; then
          cat tests/data/performance-results.json
        fi
        
    - name: 📈 Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/data/performance-results.json

  # 🔒 Security Tests
  security-tests:
    runs-on: ubuntu-latest
    name: Security Tests
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 NPM Audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: 🔒 Run Security Tests
      run: npm run test:security
      
    - name: 📋 Security Scan Results
      run: |
        echo "Security scan completed"
        if [ -f tests/data/security-results.json ]; then
          echo "Security vulnerabilities found:"
          cat tests/data/security-results.json | jq '.vulnerabilities[] | select(.severity == "critical" or .severity == "high")'
        fi
        
    - name: 🚨 Upload Security Results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: tests/data/security-results.json

  # 🚀 Build and Package
  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: [integration-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci --only=production
      
    - name: 🏗️ Build Application
      run: |
        echo "Building application..."
        npm run build || echo "No build step required"
        
    - name: 📁 Create Deployment Package
      run: |
        mkdir -p dist
        cp -r src/ dist/
        cp -r config/ dist/
        cp -r scripts/ dist/
        cp -r workflows/ dist/
        cp package*.json dist/
        cp README.md dist/
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  # 🐳 Docker Build
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Push
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: 📊 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: takezou621/n8n-tweet
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🐳 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🌐 Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.n8n-tweet.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        
    - name: 🚀 Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        chmod +x scripts/deploy-n8n.sh
        ./scripts/deploy-n8n.sh staging
      env:
        DEPLOY_ENV: staging
        TWITTER_API_KEY: ${{ secrets.STAGING_TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.STAGING_TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.STAGING_TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.STAGING_TWITTER_ACCESS_TOKEN_SECRET }}
        
    - name: 🔍 Health Check
      run: |
        sleep 30
        chmod +x scripts/health-check.sh
        ./scripts/health-check.sh staging

  # 🌟 Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://n8n-tweet.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        
    - name: 💾 Backup Current Deployment
      run: |
        echo "Creating backup..."
        chmod +x scripts/backup-workflows.sh
        ./scripts/backup-workflows.sh
      env:
        BACKUP_ENV: production
        
    - name: 🚀 Deploy to Production
      run: |
        echo "Deploying to production environment..."
        chmod +x scripts/deploy-n8n.sh
        ./scripts/deploy-n8n.sh production
      env:
        DEPLOY_ENV: production
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        
    - name: 🔍 Health Check
      run: |
        sleep 60
        chmod +x scripts/health-check.sh
        ./scripts/health-check.sh production
        
    - name: 📢 Deployment Notification
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "🚀 Version: ${{ github.sha }}"
        echo "📅 Deployed at: $(date)"

  # 🔄 Daily Health Check
  daily-health-check:
    runs-on: ubuntu-latest
    name: Daily Health Check
    if: github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏥 Comprehensive Health Check
      run: |
        chmod +x scripts/health-check.sh
        ./scripts/health-check.sh production
        
    - name: 📊 Generate Daily Report
      run: |
        echo "# Daily Health Report - $(date)" > daily-report.md
        echo "" >> daily-report.md
        echo "## System Status" >> daily-report.md
        node src/monitoring/health-checker.js >> daily-report.md
        
    - name: 📈 Upload Daily Report
      uses: actions/upload-artifact@v3
      with:
        name: daily-health-report-$(date +%Y%m%d)
        path: daily-report.md

  # 🧹 Cleanup Old Artifacts
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup Old Artifacts
    if: github.ref == 'refs/heads/main'
    needs: [deploy-production]
    
    steps:
    - name: 🧹 Delete Old Artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
            const createdAt = new Date(artifact.created_at);
            const daysOld = (Date.now() - createdAt) / (1000 * 60 * 60 * 24);
            return daysOld > 7; // 7日以上古いアーティファクトを削除
          });
          
          for (const artifact of oldArtifacts) {
            console.log(`Deleting artifact: ${artifact.name} (${artifact.id})`);
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id
            });
          }
