name: n8n-tweet CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日深夜2時にセキュリティチェックを実行
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================
  # コード品質チェック
  # ===============================
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check code formatting
      run: npm run lint -- --max-warnings 0

  # ===============================
  # 単体テスト
  # ===============================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create test environment
      run: |
        cat > .env << EOF
        NODE_ENV=test
        LOG_LEVEL=error
        TWITTER_API_KEY=test_key
        TWITTER_API_SECRET=test_secret
        TWITTER_ACCESS_TOKEN=test_token
        TWITTER_ACCESS_TOKEN_SECRET=test_token_secret
        TWITTER_BEARER_TOKEN=test_bearer
        EOF
        
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml

  # ===============================
  # 統合テスト
  # ===============================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-check]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment
      run: |
        cat > .env << EOF
        NODE_ENV=test
        LOG_LEVEL=error
        TWITTER_API_KEY=test_key
        TWITTER_API_SECRET=test_secret
        TWITTER_ACCESS_TOKEN=test_token
        TWITTER_ACCESS_TOKEN_SECRET=test_token_secret
        TWITTER_BEARER_TOKEN=test_bearer
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=test_db
        DB_USER=test_user
        DB_PASSWORD=test_password
        REDIS_HOST=localhost
        REDIS_PORT=6379
        EOF
        
    - name: Create required directories
      run: |
        mkdir -p logs cache backups
        
    - name: Run integration tests
      run: |
        npm run test:integration || true
        node test-rss.js || true
        node test-twitter-client.js || true
        node test-monitoring-storage.js || true
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          logs/
          cache/
          test-results/

  # ===============================
  # セキュリティ監査
  # ===============================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level high
      
    - name: Run security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===============================
  # カバレッジテスト
  # ===============================
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create test environment
      run: |
        cat > .env << EOF
        NODE_ENV=test
        LOG_LEVEL=error
        TWITTER_API_KEY=test_key
        TWITTER_API_SECRET=test_secret
        TWITTER_ACCESS_TOKEN=test_token
        TWITTER_ACCESS_TOKEN_SECRET=test_token_secret
        TWITTER_BEARER_TOKEN=test_bearer
        EOF
        
    - name: Run coverage tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ===============================
  # Docker イメージビルド
  # ===============================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===============================
  # パフォーマンステスト
  # ===============================
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: |
        npm run test:performance || true
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance-results/

  # ===============================
  # 依存関係更新チェック
  # ===============================
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Check for outdated dependencies
      run: |
        npm outdated || true
        npm audit || true
        
    - name: Create issue for outdated dependencies
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Outdated Dependencies Detected',
            body: 'Automated dependency check found outdated packages. Please review and update.',
            labels: ['dependencies', 'maintenance']
          })

  # ===============================
  # デプロイ（本番環境）
  # ===============================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests, integration-tests, security-audit, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment environment
      run: |
        echo "Setting up production deployment..."
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 実際のデプロイコマンドをここに追加
        # ./scripts/deploy-n8n.sh
        
    - name: Run health check
      run: |
        echo "Running post-deployment health check..."
        # curl http://your-production-url/health
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"

  # ===============================
  # 通知
  # ===============================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests, integration-tests, security-audit]
    if: always()
    
    steps:
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ai-tweet-bot'
        text: |
          ${{ github.workflow }} workflow completed
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
