name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: 
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests during deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  # Pre-deployment validation
  pre-deploy:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 15

    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
      should-deploy: ${{ steps.decision.outputs.should-deploy }}

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Determine version and environment
      id: version
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          VERSION="main-${{ github.sha }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
          VERSION="${{ github.ref_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "Invalid ref for deployment: ${{ github.ref }}"
          exit 1
        fi

    - name: Determine target environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ github.event.inputs.environment }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENV="staging"
        elif [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
          ENV="production"
        else
          ENV="staging"
        fi
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "Target environment: $ENV"

    - name: Wait for Redis
      run: timeout 30 bash -c 'until node scripts/redis-health-check.js; do sleep 1; done'

    - name: Run tests (unless skipped)
      if: github.event.inputs.skip_tests != 'true'
      run: |
        echo "Running pre-deployment tests..."
        npm run test:unit
        npm run test:integration
        npm run test:security
      env:
        NODE_ENV: test
        CI: true
        REDIS_URL: redis://localhost:6379

    - name: Run linting
      run: npx eslint src/ --format=stylish

    - name: Deployment decision
      id: decision
      run: |
        ENV="${{ steps.env.outputs.environment }}"
        
        # Production deployments require tag
        if [[ "$ENV" == "production" && ! "${{ github.ref }}" =~ ^refs/tags/v ]]; then
          echo "Production deployment requires a version tag"
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "should-deploy=true" >> $GITHUB_OUTPUT
        echo "Proceeding with deployment to $ENV"

  # Build and push Docker images
  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    timeout-minutes: 20

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.pre-deploy.outputs.version }}

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ needs.pre-deploy.outputs.version }}

    - name: Test production image
      run: |
        # Test the built image
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}"
        echo "Testing image: $IMAGE_TAG"
        
        docker run --rm -d --name test-deploy -p 3000:3000 "$IMAGE_TAG"
        sleep 15
        
        # Basic health check
        if curl -f http://localhost:3000/api/v1/health; then
          echo "Production image health check passed"
        else
          echo "Production image health check failed"
          docker logs test-deploy
          exit 1
        fi
        
        docker stop test-deploy

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-images]
    if: needs.pre-deploy.outputs.environment == 'staging'
    environment: 
      name: staging
      url: https://n8n-tweet-staging.yourdomain.com
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        echo "Version: ${{ needs.pre-deploy.outputs.version }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}"
        
        # Here you would typically:
        # 1. Connect to staging server (SSH, kubectl, etc.)
        # 2. Update deployment configuration
        # 3. Apply the new image
        # 4. Wait for rollout to complete
        # 5. Run health checks
        
        # Example placeholder commands:
        # kubectl set image deployment/n8n-tweet n8n-tweet=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}
        # kubectl rollout status deployment/n8n-tweet --timeout=300s

    - name: Run staging health checks
      run: |
        echo "Running staging health checks..."
        # Add your staging health check commands here
        # Example: curl -f https://n8n-tweet-staging.yourdomain.com/api/v1/health

    - name: Notify staging deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            text: "ðŸš€ Staging Deployment Successful",
            attachments: [{
              color: "good",
              fields: [{
                title: "Environment",
                value: "staging",
                short: true
              }, {
                title: "Version",
                value: "${{ needs.pre-deploy.outputs.version }}",
                short: true
              }, {
                title: "Commit",
                value: "${{ github.sha }}",
                short: true
              }]
            }]
          }

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-images]
    if: needs.pre-deploy.outputs.environment == 'production'
    environment: 
      name: production
      url: https://n8n-tweet.yourdomain.com
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Production deployment confirmation
      run: |
        echo "ðŸš¨ PRODUCTION DEPLOYMENT ðŸš¨"
        echo "Version: ${{ needs.pre-deploy.outputs.version }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"

    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        echo "Version: ${{ needs.pre-deploy.outputs.version }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}"
        
        # Production deployment commands would go here
        # This typically involves:
        # 1. Blue-green deployment or rolling update
        # 2. Database migrations (if needed)
        # 3. Cache warming
        # 4. Health checks
        # 5. Rollback plan activation

    - name: Run production health checks
      run: |
        echo "Running comprehensive production health checks..."
        # Add your production health check commands here
        # These should be more thorough than staging checks

    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Production deployment of n8n-tweet system
          
          **Version:** ${{ needs.pre-deploy.outputs.version }}
          **Commit:** ${{ github.sha }}
          **Deployed:** ${{ github.event.head_commit.timestamp }}
          
          ## Changes
          ${{ github.event.head_commit.message }}
          
        draft: false
        prerelease: false

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            text: "ðŸŽ‰ Production Deployment Successful",
            attachments: [{
              color: "good",
              fields: [{
                title: "Environment",
                value: "production",
                short: true
              }, {
                title: "Version",
                value: "${{ needs.pre-deploy.outputs.version }}",
                short: true
              }, {
                title: "Commit",
                value: "${{ github.sha }}",
                short: true
              }]
            }]
          }

  # Post-deployment monitoring
  post-deploy:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    timeout-minutes: 10

    steps:
    - name: Setup monitoring
      run: |
        ENV="${{ needs.pre-deploy.outputs.environment }}"
        echo "Setting up post-deployment monitoring for $ENV"
        
        # Here you could:
        # 1. Enable additional monitoring
        # 2. Set up alerts
        # 3. Run synthetic tests
        # 4. Monitor key metrics

    - name: Wait and verify stability
      run: |
        echo "Waiting 5 minutes to verify deployment stability..."
        sleep 300
        
        # Run stability checks
        echo "Running stability verification..."
        # Add your stability check commands here

    - name: Generate deployment report
      run: |
        cat << EOF > deployment-report.md
        # Deployment Report
        
        **Environment:** ${{ needs.pre-deploy.outputs.environment }}
        **Version:** ${{ needs.pre-deploy.outputs.version }}
        **Timestamp:** $(date -u)
        **Status:** Success
        
        ## Deployment Details
        - Ref: ${{ github.ref }}
        - SHA: ${{ github.sha }}
        - Actor: ${{ github.actor }}
        
        ## Health Checks
        - âœ… Application start
        - âœ… Health endpoint
        - âœ… Dependencies connection
        - âœ… Stability verification
        EOF
        
        cat deployment-report.md

  # Rollback capability
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    timeout-minutes: 10

    steps:
    - name: Execute rollback
      run: |
        echo "ðŸš¨ EMERGENCY ROLLBACK INITIATED ðŸš¨"
        echo "Environment: ${{ github.event.inputs.environment }}"
        
        # Rollback commands would go here
        # This typically involves:
        # 1. Revert to previous stable version
        # 2. Database rollback (if needed)
        # 3. Cache clearing
        # 4. Health verification

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            text: "ðŸš¨ EMERGENCY ROLLBACK EXECUTED",
            attachments: [{
              color: "danger",
              fields: [{
                title: "Environment",
                value: "${{ github.event.inputs.environment }}",
                short: true
              }, {
                title: "Trigger",
                value: "Manual rollback",
                short: true
              }]
            }]
          }