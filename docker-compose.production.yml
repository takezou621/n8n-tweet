version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: n8n-tweet-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n_production
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_NON_ROOT_USER: n8n
      POSTGRES_NON_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n_production"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: n8n-tweet-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-tweet-workflow
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      N8N_DB_TYPE: postgresdb
      N8N_DB_POSTGRESDB_HOST: postgres
      N8N_DB_POSTGRESDB_PORT: 5432
      N8N_DB_POSTGRESDB_DATABASE: n8n_production
      N8N_DB_POSTGRESDB_USER: n8n
      N8N_DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
      
      # n8n Configuration
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      N8N_EDITOR_BASE_URL: https://${N8N_SUBDOMAIN}.${DOMAIN}
      WEBHOOK_URL: https://${N8N_SUBDOMAIN}.${DOMAIN}
      
      # Authentication
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      
      # Security
      N8N_SECURE_COOKIE: true
      N8N_ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Logging
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console
      
      # Timezone
      GENERIC_TIMEZONE: Asia/Tokyo
      TZ: Asia/Tokyo
      
      # Performance
      EXECUTIONS_DATA_PRUNE: true
      EXECUTIONS_DATA_MAX_AGE: 168 # 7 days
      
      # External Secrets (for Twitter API)
      TWITTER_API_KEY: ${TWITTER_API_KEY}
      TWITTER_API_SECRET: ${TWITTER_API_SECRET}
      TWITTER_ACCESS_TOKEN: ${TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${TWITTER_ACCESS_TOKEN_SECRET}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # n8n-tweet Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: n8n-tweet-dashboard
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: n8n_production
      DB_USER: n8n
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Dashboard
      DASHBOARD_HOST: 0.0.0.0
      DASHBOARD_PORT: 3000
      
      # Security
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: https://${DASHBOARD_SUBDOMAIN}.${DOMAIN}
      
      # API URLs
      N8N_API_URL: http://n8n:5678
      
      # Timezone
      TZ: Asia/Tokyo
    volumes:
      - dashboard_data:/app/cache
      - dashboard_logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: n8n-tweet-nginx
    restart: unless-stopped
    depends_on:
      n8n:
        condition: service_healthy
      dashboard:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/nginx_status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: n8n-tweet-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: n8n-tweet-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  n8n-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/data/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/data/redis

  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/data/n8n

  dashboard_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/data/dashboard

  dashboard_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/logs

  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/logs/nginx

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/data/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/n8n-tweet/data/grafana