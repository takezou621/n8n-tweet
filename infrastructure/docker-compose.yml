version: '3.8'

services:
  # n8n workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-tweet-app
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - NODE_ENV=production
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - DB_TYPE=${DB_TYPE:-postgres}
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${DB_NAME:-n8n}
      - DB_POSTGRESDB_USER=${DB_USERNAME:-n8n}
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD}
      - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${JWT_SECRET}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - GENERIC_TIMEZONE=UTC
      - N8N_LOG_LEVEL=${LOG_LEVEL:-info}
      - N8N_METRICS=true
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/workflows
      - ./config:/home/node/config
      - ./src:/home/node/src
      - ./logs:/home/node/logs
    depends_on:
      - postgres
      - redis
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: n8n-tweet-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-n8n}
      - POSTGRES_USER=${DB_USERNAME:-n8n}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_NON_ROOT_USER=n8n
      - POSTGRES_NON_ROOT_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-n8n} -d ${DB_NAME:-n8n}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: n8n-tweet-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./infrastructure/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application monitoring
  monitoring:
    build:
      context: .
      dockerfile: ./infrastructure/Dockerfile.monitoring
    container_name: n8n-tweet-monitoring
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - WEBHOOK_ALERTS_URL=${WEBHOOK_ALERTS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
      - n8n
    networks:
      - n8n-network

  # Log aggregation
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: n8n-tweet-logs
    restart: unless-stopped
    volumes:
      - ./logs:/fluent-bit/logs
      - ./infrastructure/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    depends_on:
      - n8n
    networks:
      - n8n-network

  # Reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: n8n-tweet-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/ssl:/etc/ssl/certs
    depends_on:
      - n8n
    networks:
      - n8n-network
    profiles:
      - production

# Volumes for persistent data
volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  n8n-network:
    driver: bridge

# Health check and backup services
services:
  # Backup service
  backup:
    build:
      context: .
      dockerfile: ./infrastructure/Dockerfile.backup
    container_name: n8n-tweet-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - postgres_data:/backup/postgres:ro
      - n8n_data:/backup/n8n:ro
      - ./backups:/backup/local
    depends_on:
      - postgres
    networks:
      - n8n-network
    profiles:
      - production

  # Performance monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: n8n-tweet-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - n8n-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: n8n-tweet-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - n8n-network
    profiles:
      - monitoring

# Additional volumes for monitoring
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
