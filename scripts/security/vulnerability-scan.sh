#!/bin/bash

# ËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥„Çπ„ÇØ„É™„Éó„Éà
# npm audit „Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÜ„Çπ„Éà„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„ÅüÂåÖÊã¨ÁöÑ„Å™„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ

set -e

# „Ç´„É©„ÉºÂÆöÁæ©
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# „É≠„Ç∞„Éï„Ç°„Ç§„É´Ë®≠ÂÆö
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_DIR="logs/security"
AUDIT_LOG="$LOG_DIR/audit_$TIMESTAMP.log"
SECURITY_REPORT="$LOG_DIR/security_report_$TIMESTAMP.json"

# „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
mkdir -p "$LOG_DIR"

echo -e "${BLUE}üîí Starting Comprehensive Security Scan${NC}"
echo "Timestamp: $(date)"
echo "Log Directory: $LOG_DIR"
echo ""

# 1. ‰æùÂ≠òÈñ¢‰øÇ„ÅÆËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥
echo -e "${YELLOW}üì¶ Checking dependency vulnerabilities with npm audit...${NC}"
{
    echo "=== NPM Audit Results ==="
    echo "Scan time: $(date)"
    echo ""
    
    # npm audit„ÅÆÂÆüË°å„Å®ÁµêÊûú„ÅÆË®òÈå≤
    if npm audit --audit-level moderate 2>&1; then
        echo -e "${GREEN}‚úÖ No moderate or high vulnerabilities found${NC}"
        AUDIT_STATUS="PASS"
    else
        echo -e "${RED}‚ùå Vulnerabilities detected${NC}"
        AUDIT_STATUS="FAIL"
        
        # Ë©≥Á¥∞„É¨„Éù„Éº„ÉàÁîüÊàê
        echo "Generating detailed audit report..."
        npm audit --json > "$SECURITY_REPORT" 2>/dev/null || true
    fi
} | tee "$AUDIT_LOG"

# 2. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÜ„Çπ„Éà„ÅÆÂÆüË°å
echo -e "${YELLOW}üß™ Running security tests...${NC}"
SECURITY_TEST_STATUS="PASS"
{
    echo ""
    echo "=== Security Test Results ==="
    echo "Test time: $(date)"
    echo ""
    
    if npm run test:security 2>&1; then
        echo -e "${GREEN}‚úÖ All security tests passed${NC}"
    else
        echo -e "${RED}‚ùå Security tests failed${NC}"
        SECURITY_TEST_STATUS="FAIL"
    fi
} | tee -a "$AUDIT_LOG"

# 3. Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
echo -e "${YELLOW}‚öôÔ∏è Checking configuration security...${NC}"
CONFIG_STATUS="PASS"
{
    echo ""
    echo "=== Configuration Security Check ==="
    echo "Check time: $(date)"
    echo ""
    
    # .env „Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®„Å®Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    if [ -f ".env" ]; then
        PERMS=$(stat -f "%A" .env 2>/dev/null || stat -c "%a" .env 2>/dev/null || echo "unknown")
        if [ "$PERMS" != "600" ] && [ "$PERMS" != "unknown" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: .env file permissions should be 600 (current: $PERMS)${NC}"
            CONFIG_STATUS="WARNING"
        else
            echo -e "${GREEN}‚úÖ .env file permissions are secure${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: .env file not found${NC}"
    fi
    
    # package.json „ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ
    if command -v jq >/dev/null 2>&1; then
        echo "Checking package.json security configuration..."
        
        # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Èñ¢ÈÄ£„Çπ„ÇØ„É™„Éó„Éà„ÅÆÂ≠òÂú®Á¢∫Ë™ç
        if jq -e '.scripts."security:audit"' package.json >/dev/null; then
            echo -e "${GREEN}‚úÖ Security audit script configured${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Security audit script not configured${NC}"
            CONFIG_STATUS="WARNING"
        fi
        
        if jq -e '.scripts."test:security"' package.json >/dev/null; then
            echo -e "${GREEN}‚úÖ Security test script configured${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Security test script not configured${NC}"
            CONFIG_STATUS="WARNING"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  jq not available, skipping package.json checks${NC}"
    fi
    
    # Git hooksÔºàlefthookÔºâ„ÅÆË®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ
    if [ -f "lefthook.yml" ]; then
        echo -e "${GREEN}‚úÖ Git hooks (lefthook) configured${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Git hooks not configured${NC}"
        CONFIG_STATUS="WARNING"
    fi
    
} | tee -a "$AUDIT_LOG"

# 4. Ê©üÂØÜ„Éï„Ç°„Ç§„É´„ÅÆÊºèÊ¥©„ÉÅ„Çß„ÉÉ„ÇØ
echo -e "${YELLOW}üïµÔ∏è Checking for exposed secrets...${NC}"
SECRET_STATUS="PASS"
{
    echo ""
    echo "=== Secret Exposure Check ==="
    echo "Check time: $(date)"
    echo ""
    
    # „Çà„Åè„ÅÇ„ÇãÊ©üÂØÜ„Éï„Ç°„Ç§„É´„Éë„Çø„Éº„É≥
    SECRET_PATTERNS=(
        "*.pem"
        "*.key"
        "*.p12"
        "*.pfx"
        "id_rsa"
        "id_dsa"
        "*.keystore"
    )
    
    for pattern in "${SECRET_PATTERNS[@]}"; do
        if find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*" | head -1 | grep -q .; then
            echo -e "${RED}‚ùå Potential secret file found: $pattern${NC}"
            SECRET_STATUS="FAIL"
        fi
    done
    
    # „Éè„Éº„Éâ„Ç≥„Éº„Éâ„Åï„Çå„ÅüÁßòÂØÜÈçµ„ÅÆÊ§úÁ¥¢
    if grep -r -E "(BEGIN RSA PRIVATE KEY|BEGIN PRIVATE KEY|-----BEGIN)" --include="*.js" --include="*.json" --include="*.env*" --exclude-dir=node_modules --exclude-dir=.git . 2>/dev/null | head -5; then
        echo -e "${RED}‚ùå Potential hardcoded private keys found${NC}"
        SECRET_STATUS="FAIL"
    else
        echo -e "${GREEN}‚úÖ No hardcoded private keys detected${NC}"
    fi
    
    # API „Ç≠„Éº„Éë„Çø„Éº„É≥„ÅÆÊ§úÁ¥¢
    API_KEY_PATTERNS=(
        "sk-[a-zA-Z0-9]{40,}"
        "AKIA[0-9A-Z]{16}"
        "AIza[0-9A-Za-z_-]{35}"
    )
    
    for pattern in "${API_KEY_PATTERNS[@]}"; do
        if grep -r -E "$pattern" --include="*.js" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git . 2>/dev/null | head -1 | grep -q .; then
            echo -e "${RED}‚ùå Potential API key pattern found: $pattern${NC}"
            SECRET_STATUS="FAIL"
        fi
    done
    
    if [ "$SECRET_STATUS" = "PASS" ]; then
        echo -e "${GREEN}‚úÖ No exposed secrets detected${NC}"
    fi
    
} | tee -a "$AUDIT_LOG"

# 5. Á∑èÂêàÁµêÊûú„É¨„Éù„Éº„Éà
echo -e "${BLUE}üìä Security Scan Summary${NC}"
{
    echo ""
    echo "=== SECURITY SCAN SUMMARY ==="
    echo "Scan completed: $(date)"
    echo ""
    echo "Results:"
    echo "- Dependency Audit: $AUDIT_STATUS"
    echo "- Security Tests: $SECURITY_TEST_STATUS"
    echo "- Configuration: $CONFIG_STATUS"
    echo "- Secret Exposure: $SECRET_STATUS"
    echo ""
    
    # ÂÖ®‰ΩìÁöÑ„Å™ÁµêÊûúÂà§ÂÆö
    if [ "$AUDIT_STATUS" = "PASS" ] && [ "$SECURITY_TEST_STATUS" = "PASS" ] && [ "$SECRET_STATUS" = "PASS" ]; then
        if [ "$CONFIG_STATUS" = "PASS" ]; then
            echo -e "${GREEN}üéâ OVERALL RESULT: ALL CHECKS PASSED${NC}"
            OVERALL_STATUS=0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  OVERALL RESULT: PASSED WITH WARNINGS${NC}"
            OVERALL_STATUS=0
        fi
    else
        echo -e "${RED}‚ùå OVERALL RESULT: SECURITY ISSUES DETECTED${NC}"
        OVERALL_STATUS=1
        
        echo ""
        echo "RECOMMENDED ACTIONS:"
        [ "$AUDIT_STATUS" = "FAIL" ] && echo "- Run 'npm audit fix' to resolve dependency vulnerabilities"
        [ "$SECURITY_TEST_STATUS" = "FAIL" ] && echo "- Review and fix failing security tests"
        [ "$SECRET_STATUS" = "FAIL" ] && echo "- Remove or secure exposed secrets"
        [ "$CONFIG_STATUS" = "WARNING" ] && echo "- Review configuration security warnings"
    fi
    
    echo ""
    echo "Log files:"
    echo "- Audit log: $AUDIT_LOG"
    [ -f "$SECURITY_REPORT" ] && echo "- Security report: $SECURITY_REPORT"
    
} | tee -a "$AUDIT_LOG"

# 6. GitHub ActionsÂêë„Åë„ÅÆÂá∫ÂäõÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
if [ -n "$GITHUB_ACTIONS" ]; then
    echo "::set-output name=audit-status::$AUDIT_STATUS"
    echo "::set-output name=security-test-status::$SECURITY_TEST_STATUS"
    echo "::set-output name=config-status::$CONFIG_STATUS"
    echo "::set-output name=secret-status::$SECRET_STATUS"
    echo "::set-output name=overall-status::$OVERALL_STATUS"
    
    if [ "$OVERALL_STATUS" -ne 0 ]; then
        echo "::error::Security scan failed. Check the logs for details."
    fi
fi

echo ""
echo -e "${BLUE}Security scan completed. Check $AUDIT_LOG for full details.${NC}"

exit $OVERALL_STATUS